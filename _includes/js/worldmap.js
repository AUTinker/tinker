// Generated by CoffeeScript 1.6.3
var worldmap;

worldmap = function() {

    var map = L.map('worldmap-map').setView([37.8, -96], 4);
    var Stamen_TonerLite = L.tileLayer('http://{s}.tile.stamen.com/toner-lite/{z}/{x}/{y}.png', {
        minZoom: 0,
        maxZoom: 20
    }).addTo(map);

    var layers = [];
    var scale = 1000;

    redraw();

    $('#worldmap input[type=radio]').change(function () {
        $.ajax({
            type: 'GET',
            url: 'query/query.php',
            data: { type: this.id },
            dataType:'json'
        }).done(function (json) {
            redraw(json);;
        });
    });

    function redraw(json) {

        json = typeof json !== 'undefined' ? json : false;

        for (var i = 0; i < layers.length; ++i)
            map.removeLayer(layers[i]);

        var info = L.control();
        info.onAdd = function (map) {
            this._div = L.DomUtil.create('div', 'info');
            this.update();
            return this._div;
        };
        info.update = function (props) {
            this._div.innerHTML = '<h4>US Population Density</h4>' +
                (props ? '<b>' + props.name + '</b><br />' +
                 props.density + ' people / mi<sup>2</sup>'
                 : 'Hover over a state');
        };
        info.addTo(map);
        layers.push(info);

        var scaleval = [];
        var sum = 0, state;
        for (state in json)
            sum += json[state];

        for (state in json)
            scaleval.push({ state: json[state]*scale/sum });

        // get color depending on density value
        function getColor(d) {
            return d > 800 ? '#800026' :
                d > 500  ? '#BD0026' :
                d > 200  ? '#E31A1C' :
                d > 100  ? '#FC4E2A' :
                d > 50   ? '#FD8D3C' :
                d > 20   ? '#FEB24C' :
                d > 10   ? '#FED976' :
                '#FFEDA0';
        }

        function style(feature) {
            return {
                weight: 2,
                opacity: 1,
                color: 'white',
                dashArray: '3',
                fillOpacity: 0.7,
                fillColor: getColor(json ? json[feature.properties.name] : feature.properties.density)
            };
        }
        function highlightFeature(e) {
            var layer = e.target;

            layer.setStyle({
                weight: 5,
                color: '#666',
                dashArray: '',
                fillOpacity: 0.7
            });

            if (!L.Browser.ie && !L.Browser.opera) {
                layer.bringToFront();
            }

            info.update(layer.feature.properties);
        }
        var geojson;

        function resetHighlight(e) {
            geojson.resetStyle(e.target);
            info.update();
        }

        function zoomToFeature(e) {
            map.fitBounds(e.target.getBounds());
        }

        function onEachFeature(feature, layer) {
            layer.on({
                mouseover: highlightFeature,
                mouseout: resetHighlight,
                click: zoomToFeature
            });
        }

        geojson = L.geoJson(statesData, {
            style: style,
            onEachFeature: onEachFeature
        }).addTo(map);
        layers.push(geojson);

        map.attributionControl.addAttribution('Population data &copy; <a href="http://census.gov/">US Census Bureau</a>');
        map.attributionControl.addAttribution('Sutdent data &copy; <a href="http://auburn.edu/">Auburn University</a>');

        var legend = L.control({position: 'bottomright'});

        legend.onAdd = function (map) {

            var div = L.DomUtil.create('div', 'info legend'),
                grades = [0, 10, 20, 50, 100, 200, 500, 800, 1000],
                labels = [],
                from, to;

            for (var i = 0; i < grades.length-1; i++) {
                from = grades[i];
                to = grades[i + 1];

                labels.push(
                    '<i style="background:' + getColor(from + 1) + '"></i> ' +
                        from + '&ndash;' + to);
            }

            div.innerHTML = labels.join('<br>');
            return div;
        };

        legend.addTo(map);
        layers.push(legend);;
    };

};
